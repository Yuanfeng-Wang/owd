/**
\page development

\section schedule Development Schedule
Currently scheduled tasks:
  <table border="0" cellpadding="2" cellspacing="3">
    <tr>
      <th width="120" align="left">Date</th>
      <th width="120" align="left">Assigned to</th>
      <th align="left">Description and estimate</th>
    </tr>
    <tr>
      <td>11-Feb-2011</td>
      <td>vandeweg</td>

      <td><b>stop trajectories on force input</b> [1-2 days] See how
          fast we can cancel a trajectory outside of owd based on F/T
          values, then add functionality inside of OWD if we need it
          faster.  Requires quick python testing plus possibly
          modifying the trajectory class(es) in OWD.</td>

    </tr>
    <tr>
      <td>11-Feb-2011</td>
      <td>vandeweg</td>

      <td><b>tactile sensors</b> [1-2 days] Get data from tactile
          sensors published as ROS messages.  Requires sending and
          receiving the right CANbus messages inside OWD.  Mike has
          already started this.</td>

    </tr>
    <tr>
      <td>18-Feb-2011</td>
      <td>vandeweg</td>

      <td><b>absolute joint encoders</b> [3 days] Switch over to using the
          joint encoders to avoid calibration and achieve better
          endpoint accuracy.  Requires getting additional puck values
          and tuning the control gains based on new error scales.
          Also need to see whether it's necessary to use the motor
          encoders for interpolation in between joint encoder
          ticks.</td>

    </tr>
    <tr>
      <td>25-Feb-2011</td>
      <td>vandeweg</td>

      <td><b>auto-calibration</b> [3 days] Determine startup calibration for
          J5/J6/J7 automatically by moving the joints to their limits
          in a safe way.  Requires resurrecting code that Mike had
          working on the previous Herb configuration.</td>

    </tr>
    <tr>
      <td>04-Mar-2011</td>
      <td>vandeweg</td>

      <td><b>force-based trajectories</b> [2-3 weeks] Make a new subclass of
          trajectories that specify forces over time instead of joint
          positions.  Need to figure out the way it's specified and
          the way that the configuration is bounded, as well as what
          happens in different runtime cases.  Need to enhance WAM.cc
          to allow trajectories to output desired torques in addition
          to pos/vel/accel.</td>

    </tr>
  </table>

Additional unscheduled tasks:
  <table border="0" cellpadding="2" cellspacing="3">
    <tr>
      <th width="120" align="left">Date</th>
      <th width="120" align="left">Assigned to</th>
      <th align="left">Description and estimate</th>
    </tr>
    <tr>
      <td></td>
      <td></td>

      <td><b>calibration verification (possibly using F/T sensor)</b>
          Verify the overall arm joint angles by moving joints to
          their limits and/or watching the F/T sensor values as the
          hand moves around.  This could be done as a subroutine in
          openwamdriver.cpp.</td>

    </tr>
    <tr>
      <td></td>
      <td></td>

      <td><b>strain gauges</b> Get the strain gauge values from the
          finger pucks.  Similar to getting the tactile data.</td>

    </tr>
    <tr>
      <td></td>
      <td></td>

      <td><b>breakaway positions</b> publish breakaway detection
          settings for the three fingers.  Requires querying
          additional finger puck parameters.</td>

    </tr>
    <tr>
      <td></td>
      <td></td>

      <td><b>update dynamic model based on finger positions</b> The
          link7 model assumes the CG of the hand is always on-axis,
          without regard for the finger positions.  Most of the
          groundwork is in place for the link7 model to update based
          on the actual finger positions, but it still needs final
          testing.</td>

    </tr>
    <tr>
      <td></td>
      <td></td>

      <td><b>update link7 mass with grabbed object properties</b>
          Allow clients to inform the WAM of the mass of what the hand
          is holding for better dynamic performance.  Some of this was
          in place earlier and may just need to be resurrected.</td>

    </tr>
    <tr>
      <td></td>
      <td></td>

      <td><b>calibrate dynamic model</b> write a system-ID routine to
          improve the inertial parameters of each link.  This could be
          done outside of OWD, either online or offline.  Currently
          we're just using data calculated from the CAD mass
          models.</td>

    </tr>
    <tr>
      <td></td>
      <td></td>

      <td><b>recalibration of transmission ratios</b> Automatically
          check for and adjust the transmission ratios for each joint.
          Similar work to the joint offset auto-calibration.</td>

    </tr>
  </table>

\note This page was automatically generated from the file owd/develoment.dox.

*/

