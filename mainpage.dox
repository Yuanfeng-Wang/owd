/**
\mainpage
\htmlinclude manifest.html

\b OWD
 is a ROS driver for controlling a Barrett WAM Arm and/or model 280 Hand.

<!--
\section features Features
It can do some stuff.
-->

\section downloading Downloading
The OWD ROS package, and its pr_msgs dependency, can be obtained via svn from
\verbatim
http://svn.pittsburgh.intel-research.net/repos/pr/public/trunk/src/owd
http://svn.pittsburgh.intel-research.net/repos/pr/public/trunk/src/pr_msgs
\endverbatim

\section dependencies Dependencies
OWD requires either a Peak or an ESD CanBUS card.  The Peak IPEH-002066 (single channel) or IPEH-002067 (dual channel) card is recommended for desktop systems running Xenomai, while the Peak IPEH-002093 performs well on laptops if Xenomai is not required.

The Peak Linux driver can be obtained from
  \b http://www.peak-system.com/fileadmin/media/linux/files/peak-linux-driver.6.20.tar.gz

Build it as follows:
\verbatim
  make NET=NO RT=XENOMAI
  sudo make install
\endverbatim

The remaining system dependencies can be installed using rosdep once
you have owd in your ROS_PACKAGE_PATH:
\verbatim
rosdep install owd
\endverbatim

\section building Building
Make sure you have both the owd and pr_msgs directories in your ROS_PACKAGE_PATH, and then build owd using rosmake:
\verbatim
rosmake owd
\endverbatim

Six executables will be created:
 - \b owd Driver for arm only
 - \b owdrt Driver for arm running under Xenomai RT
 - \b owdbhd Driver for arm plus 280 Hand
 - \b owdbhdrt Driver for arm plus 280 Hand (Xenomai)
 - \b canbhd Driver for 280 Hand only
 - \b canbhdrt Driver for 280 Hand only (Xenomai)

\section configuration Configuring
\b owd.launch is a sample launch file for staring owd using \b roslaunch.  The following parameters are supported:

 - \b ~/canbus_number Numeric id of the canbus device, appended to "/dev/pcan" for Peak cards or "/dev/can" for ESD cards.
 - \b ~/hand_type Type of hand installed.  Should be one of:
   - \b 260 For a BH260 Hand (serial communication)
   - \b 280 For a BH280 Hand (CANbus communication)
   - \b 280+TACT For a BH280 Hand with the fingertip tactile arrays installed
   - \b none For no hand installed
 - \b ~/forcetorque_sensor Whether the Barrett Force/Torque sensor is installed (true/false)
 - \b ~/calibration_file A string specifying a file to keep on disk of the joint calibration values (see the \b Calibration section below)
 - \b ~/home_position A comma-separated list of joint values, in radians, of the configuration of the arm when the encoder values have been lost and the home position needs to be reset.

\section running Running

At this time OWD should be launched on the same machine it will run on, since it requires stdio for startup prompts.

\verbatim
roslaunch owd.launch
\endverbatim

No more than one OWD should be started from a single roslaunch file so that the stdio from each remains independent.

\section controlling Controlling

OWD is primarily controlled through ROS Service Calls.  The following service calls are currently supported (most services are defined in the pr_msgs package; the remainder are in owd):
 - \b AddTrajectory: Adds a new joint trajectory to the queue
 - \b SetStiffness: Controls how firmly OWD will try to hold the current position, on a scale from 0 (no holding at all) to 1 (firmly holding).
 - \b PauseTrajectory: Pauses the currently-running trajectory
 - \b DeleteTrajectory: Deletes the specified trajectory from the queue.  If the current trajectory is deleted then the arm will stop where it is.  Any queued trajectories following the deleted one will also be deleted if their start position does not match the current position (if the current trajectory was deleted) or the end position of the previous trajectory (if a queued trajectory was deleted)
 - \b CancelAllTrajectories: Always brings the arm to an immediate stop by deleting the current trajectory and all queued trajectories.
 - \b ReplaceTrajectory: Replaces a queued trajectory with a new one.  If the end position changes, then any subsequent trajectories already in the queue will be deleted.
 - \b SetSpeed: Sets the max speed of each joint.  Note that there are compiled-in joint velocity limits which prevent the speed from being set to an unsafe value.
 - \b GetArmDOF: Returns the number of joints
 - \b CalibrateJoints: Puts the arm into <b>Calibration Mode</b>, so that the joints can be calibrated using the text interface on stdin/stdout.

OWD can also be controlled by publishing messages to ROS topics:
 - \b wamservo: A vector of one or more joint indices and corresponding velocities for moving the arm in velocity mode

OWD provides feedback through the following ROS topics:
 - \b wamstate: Joint positions, velocities, estimated torques due to external forces, and the state of the trajectory queue
 - \b waminternals: Joint positions, total joint torques, feedforward torques from the dynamic simulators, and controller PID gain values
 - \b forcetorque: A geometry_msgs/Wrench message containing the values from the force/torque sensor (only published if installed)

Additionally, OWD publishes a TF frame for every link, defining \b wam1 in terms of \b wam0, \b wam2 in terms of \b wam1, etc, all the way up to \b wam7 in terms of \b wam6.

\section calibration Calibration

Calibration using OWD:

Make a local copy of owd.launch from the owd folder:
A) Specify fields inside owd.launch:
1. for saving the calibration file.
2. specify the can bus number:
2.a) ls /dev/pcan* 
3. Specify the home position, for the right WAM, just specify the joint values inside the owd.launch file. 

B) e-stop the WAM -> this cuts the power to the pucks and makes them lose their values.
1) You can see the errors on the pendant LEDs.

C) Shift idle the WAM.

D) roslaunch owd.launch

E) OWD homes the hand, lift it up to a safe config., while doing this.

F) Move the WAM to its home position.

G) Type HOME and press enter on console.
    -> OWD initializes the position of the motor encoders and AP in its datastructures based on the values specified in the launch file.

I) Shift+Activate the WAM.

J) Now, we need to work on using the level to finely calibrate the wam.

K) 
1)Do "rosservice list" to find the name of appropriate calibration service, 
2)then "rosservice call /owd/CalibrateJoints", replace /owd/CalibrateJoints with the correct service name from step K.1)

L)Use a level to set the joint values (AP value in the virtual encoder limit).
1) Move the joint "i" (i is a number from 1 to 7) to a multiple of 90 degrees (because then you can use a level set to ascertain when the joint is "really" at the multiple of 90 degrees.
2) When you are sure, from the level reading, that the joint is at the value you expect it to be (i.e. some multiple of 90), press "i" (where i is the joint number) and then "y" (without the double quotes). Before pressing "y", and after pressing "i", owd will display in red, what value it will set for the joint position you are currently holding the joint "i" at.
3) Repeat this for all the other joints, using points 4 and 5 below to help in the process.
4) To hold a joint at a certain position (preferrably a multiple of 90 degrees, so it helps with level based calibration of joints that are distal to this joint):
"h" + "joint number" to hold a joint (if the join position is within 1 or 2 degrees of a multiple of 90, owd will snap the joint to that multiple of 90).
5) To unhold that joint, "u" + "joint number".
6) When you are done with this process press "d" or "q" to abort this process.
7) Move the WAM to its home position, then press shift+idle.
8) The home position calibration is now done.
10) Hit shift+activate to resume controlling the robot.

To shut down robot, always do the following steps in the same order:
1) Shift+Idle the robot.
2) Ctrl+c on owd console.

\section develoment Development

Development of OWD is handled by the collaboration of its users.  See the \subpage development page for the current task list and schedule.

\verbatim
Copyright 2010-2011 Carnegie Mellon University and Intel Corporation
\endverbatim
*/
